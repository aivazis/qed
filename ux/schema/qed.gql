# -*- graphql -*-
#
# michael a.g. aïvázis <michael.aivazis@para-sim.com>
# (c) 1998-2022 all rights reserved


schema {
  query: Query
}


# the top level query
type Query {
  # information about the known data sets
  readers(after: String, first: Int, before: String, last: Int, order: String): ReaderConnection!

  # collect pixel values at a set of points
  sample(dataset: ID, line: Int!, sample: Int!): Sample!

  # server version information
  version: Version!
}


# server version
type Version {
  major: Int!
  minor: Int!
  micro: Int!
  revision: String!
}


# readers
type Reader implements Node {
  # ids
  id: ID!
  uuid: ID!
  name: ID!
  # the full path to the supporting file
  uri: String!
  # the prefix of the data request url
  api: String!
  # the set of dataset selectors and their legal values
  selectors: [Selectors]!
  # the actual dataset contained in the source
  datasets: [Dataset]!
}


# datasets
type Dataset implements Node {
  # ids
  id: ID!
  uuid: ID!
  name: ID!
  # metadata
  channels: [String!]!
  datatype: String!
  selector: [Selector]!
  shape: [Int!]!
  origin: [Int!]!
  tile: [Int!]!
}


# selectors
type Selectors {
  # name
  name: String!
  values: [String!]!
}


type Selector {
  # name
  name: String!
  value: String!
}


# connections
type ReaderConnection {
  count: Int
  edges: [ReaderEdge]
  pageInfo: PageInfo!
}

type ReaderEdge {
  node: Reader
  cursor: String!
}


# data exchanges
type Sample {
  pixel: [Int]
  value: [ChannelValue]
}

type ChannelValue {
  channel: String
  rep: String
}

# interfaces
# the node interface
interface Node {
  # the node relay id
  id: ID!
  # and the uuid of the pyre object
  uuid: ID!
}


# boilerplate for connections
type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}


# end of file
