# -*- graphql -*-
#
# michael a.g. aïvázis <michael.aivazis@para-sim.com>
# (c) 1998-2024 all rights reserved


schema {
  query: Query
  mutation: Mutation
}


# the top level query
type Query {
  # server version information
  version: Version!

  # the qed session
  qed: QED!

  # retrieve the contents of a data archive
  contents(archive: String!, path: String!): [Item]
  # attempt to guess as much about a dataset as possible
  discover(archive: String!, uri: String!, module: String!) : ProductMetadata
  # collect data values as represented by the available channels at a particular pixel
  sample(dataset: ID, line: Int!, sample: Int!): Sample!
  # describe the visualization pipeline for the specified {channel} of a {dataset}
  # so the client can render controls to manipulate its configuration
  viz(dataset: ID, channel: String!): VisualizationPipeline!
  # generate candidate shapes given the size of a raster
  guessShape(size: String! aspect: String!): [Shape]
}


# server version
type Version {
  major: Int!
  minor: Int!
  micro: Int!
  revision: String!
}

# the qed session
type QED implements Node {
  # the id
  id: ID!
  # the visible viewports
  views: [View]
  # the connected data archives
  archives: [Archive]
  # the connected readers
  readers: [Reader]
}


# viewports
type View implements Node {
  # ids
  id: ID!
  name: ID!
  # info
  reader: Reader
  dataset: Dataset
  channel: Channel
  selections: [Selector]
}

# archives
type Archive implements Node {
  # id
  id: ID!
  # the name of the archive
  name: String!
  # its uri
  uri: String!
  # the supported readers
  readers: [String!]!
}

# archive contents
type Item implements Node {
  # id
  id: ID!
  # the name of the item
  name: String!
  # its uri
  uri: String!
  # a marker for directories
  isFolder: Boolean!
}

# product metadata
type ProductMetadata implements Node {
  # id
  id: ID!
  # the product uri
  uri: String!
  # product type
  product: String
  # the size of the data product in bytes; float because int is 32 bit
  bytes: Float
  # the number of cells in the data product; float because int is 32 bit
  cells: Float
  # shape
  shape: [Int]
  # data type
  type: String
}

# readers
type Reader implements Node {
  # ids
  id: ID!
  name: ID!
  # the full path to the supporting file
  uri: String!
  # the prefix of the data request url
  api: String!
  # the catalog of dataset selectors and their legal values
  selectors: [Selectors]!
  # the catalog of dataset selectors and their available values
  available: [Selectors]!
  # the actual datasets contained in the source
  datasets: [Dataset]!
}


# datasets
type Dataset implements Node {
  # ids
  id: ID!
  name: ID!
  # metadata
  channels: [Channel]!
  datatype: String!
  selector: [Selector]!
  shape: [Int!]!
  origin: [Int!]!
  tile: [Int!]!
}

# channel
type Channel implements Node {
  # ids
  id: ID!
  name: ID!
  tag: String!
  # the viz pipeline controllers
  controllers: [Controller]!
  # and its view state
  view: ChannelView
}

# selectors
type Selectors {
  # name
  name: String!
  values: [String!]!
}


type Selector {
  # name
  name: String!
  value: String!
}

# data exchanges
type Sample {
  pixel: [Int]
  value: [ChannelRep]
}

type ChannelRep {
  channel: String
  reps: [ChannelValue]
}

type ChannelValue {
  rep: String
  units: String
}


# visualization pipeline
type VisualizationPipeline {
  dataset: ID
  channel: String!
  controllers: [Controller!]!
}

# controllers
type RangeController implements Node {
  id: ID!
  session: ID!
  slot: String!
  min: Float!
  max: Float!
  low: Float!
  high: Float!
}

type ValueController implements Node {
  id: ID!
  session: ID!
  slot: String!
  min: Float!
  max: Float!
  value: Float!
}

# put them all together
union Controller = RangeController | ValueController

type ChannelView implements Node {
  id: ID!
  name: ID!
  measure: ChannelMeasure
  sync: ChannelSync
  zoom: ChannelZoom
}

type ChannelMeasure implements Node {
  id: ID!
  name: ID!
  active: Boolean
  path: [Pixel]
  closed: Boolean
  selection: [Int]
}

type ChannelSync implements Node {
  id: ID!
  name: ID!
  channel: Boolean
  zoom: Boolean
  scroll: Boolean
  path: Boolean
  offsets: Pixel
}

type ChannelZoom implements Node {
  id: ID!
  name: ID!
  horizontal: Int
  vertical: Int
  coupled: Boolean
}

# pixel
type Pixel {
  x: Int
  y: Int
}

# raster shape
type Shape {
  lines: String!
  samples: String!
}


# mutations
type Mutation {
  # viewports
  viewCollapse(viewport: Int!): ViewInfo!
  viewSplit(viewport: Int!): ViewInfo!
  viewSelectReader(viewport: Int!, reader: String!): ViewInfo!
  viewToggleCoordinate(selection: ViewSelectorInput!): ViewInfo!
  viewToggleChannel(selection: ViewSelectorInput!): ViewInfo!
  viewPersist(dummy: ID): PersistInfo

  # data archive connections
  connectArchive(name: String!, uri: String!): ArchiveInfo!
  disconnectArchive(uri: String!): ArchiveInfo!
  # reader connections
  connectReader(spec: ReaderInput!): ReaderInfo!
  disconnectReader(name: String!): ReaderInfo!

  # updates to the viz pipeline
  resetRangeController(controller: RangeControllerInput!): RangeControllerInfo!
  updateRangeController(range: RangeControllerRangeInput!): RangeControllerInfo!
  resetValueController(controller: ValueControllerInput!): ValueControllerInfo!
  updateValueController(value: ValueControllerValueInput!): ValueControllerInfo!
}

type PersistInfo {
  # the store id
  id: ID
}

# viewport management
# request payloads
input ViewSelectorInput {
  # the viewport
  viewport: Int!
  # the reader
  reader: String!
  # the selector; axis or channel name
  selector: String!
  # the value
  value: String!
}

# the response payload
type ViewInfo {
  # the id of the view
  view: View
}

# support for connecting and disconnecting data archives
# the response payload
type ArchiveInfo {
  # the new archive
  archive: Archive
}

# support for connecting and disconnecting data readers
# the request payload
input ReaderInput {
  reader: String!
  name: String!
  uri: String!
  lines: String
  samples: String
  cell: String
}

# the response payload
type ReaderInfo {
  # the new archive
  reader: Reader
}


# support for updating range controllers
# the reset request payload
input RangeControllerInput {
  # the dataset
  dataset: ID!
  # the channel
  channel: String!
  # the controller name
  slot: String!
}

# the update range request payload
input RangeControllerRangeInput {
  # the dataset
  dataset: ID!
  # the channel
  channel: String!
  # the controller name
  slot: String!
  # the parameters
  low: Float!
  high: Float!
}

# the response payload
type RangeControllerInfo {
  # the updated controller
  controller: RangeController!
}


# support for updating value controllers
# the reset request payload
input ValueControllerInput {
  # the dataset
  dataset: ID!
  # the channel
  channel: String!
  # the controller name
  slot: String!
}

# the update value request payload
input ValueControllerValueInput {
  # the dataset
  dataset: ID!
  # the channel
  channel: String!
  # the controller name
  slot: String!
  # the parameter
  value: Float!
}

# the response payload
type ValueControllerInfo {
  # the updated controller
  controller: ValueController!
}


# interfaces
# the node interface
interface Node {
  # the node relay id
  id: ID!
}


# boilerplate for connections
type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}


# end of file
