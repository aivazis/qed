// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once


// collect statistics on a tile
template <typename sourceT>
auto
qed::isce2::unwrapped::profile(
    // the data source
    const sourceT & source,
    // the points
    const points_t & path,
    // the closed path indicator
    bool closed) -> values_t<typename sourceT::value_type>
{
    // type aliases
    using index_t = typename sourceT::index_type;
    using rec_t = value_t<typename sourceT::value_type>;
    using recs_t = values_t<typename sourceT::value_type>;

    // make a container for the answer
    recs_t values;

    // if there are no points in the path
    if (path.size() == 0) {
        // nothing much to do
        return values;
    }

    // if there are at least two points in the path
    if (path.size() > 1) {
        // make a container of segments
        auto segments = segments_t();
        // go through the points
        for (auto it = path.cbegin(); it != path.cend() - 1; ++it) {
            // form a segment from the current point and the next one and add it to the pile
            segments.emplace_back(*it, *(it + 1));
        }
        // if the path is closed
        if (closed) {
            // add a segment from the last point back to the first
            segments.emplace_back(path.back(), path.front());
        }
        // now, go through the segments
        for (auto & segment : segments) {
            // unpack the segment
            auto & [tail, head] = segment;
            // unpack the points
            auto [tailLine, tailSample] = tail;
            auto [headLine, headSample] = head;
            // compute the shape of the bounding box
            auto deltaLine = std::abs(tailLine - headLine) + 1;
            auto deltaSample = std::abs(tailSample - headSample) + 1;
            // compute the pixel separation; make sure it's a double so we don't do integer
            // arithmetic until it's time
            double sep = std::max(deltaLine, deltaSample);
            // the pixel separation determines the number of data samples
            for (int pxl = 0; pxl < sep; ++pxl) {
                // interpolate
                int dLine = std::round(pxl / sep * (headLine - tailLine));
                int dSample = std::round(pxl / sep * (headSample - tailSample));
                // form the address of the current pixel
                auto pixelLine = tailLine + dLine;
                auto pixelSample = tailSample + dSample;
                // get the values
                auto amplitude = source[index_t(pixelLine, 0, pixelSample)];
                auto phase = source[index_t(pixelLine, 1, pixelSample)];
                // and record an entry in the result
                values.emplace_back(pixelLine, pixelSample, amplitude, phase);
            }
        }
    }

    // get the last point on the path
    auto & last = closed ? path.front() : path.back();
    // unpack
    auto [line, sample] = last;
    // get the values
    auto amplitude = source[index_t(line, 0, sample)];
    auto phase = source[index_t(line, 1, sample)];
    // and build the last entry
    values.emplace_back(line, sample, amplitude, phase);

    // all done
    return values;
}


// end of file
