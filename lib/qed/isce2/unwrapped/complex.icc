// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2022 all rights reserved

// code guard
#if !defined(qed_isce2_unwrapped_channels_complex_icc)
#error this file contains implementation details for qed::isce2::unwrapped::channels::complex
#else


// the complex tile generator
template <typename sourceT>
auto
qed::isce2::unwrapped::channels::complex(
    // the source
    const sourceT & source,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the range of values to render
    double min, double max, double phaseMin, double phaseMax) -> bmp_t
{
    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // for the amplitude
    using amplitudeSelector_t = amplitude_t<zoom_t>;
    using norm_t = parametric_t<amplitudeSelector_t>;
    // for the phase
    using cycleSelector_t = cycle_t<zoom_t>;
    using phaseScaler_t = affine_t<cycleSelector_t>;
    // the color map
    using colormap_t = hl_t<phaseScaler_t, norm_t>;

    // make a bitmap
    bmp_t bmp(tile[0], tile[1]);

    // zoom
    auto decimator = zoom_t(source, origin, tile, 1 << zoom);
    // extract the phase; it becomes the hue
    auto c = cycleSelector_t(decimator, { phaseMin, phaseMax });
    auto h = phaseScaler_t(c, { 0, 2 * M_PI });

    // extract the amplitude
    auto amplitude = amplitudeSelector_t(decimator);
    // map to the unit interval to make it the brightness
    auto b = norm_t(amplitude, typename norm_t::interval_type(min, max));

    // generate color
    auto colormap = colormap_t(h, b);
    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


#endif

// end of file
