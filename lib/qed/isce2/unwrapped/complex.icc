// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#if !defined(qed_isce2_unwrapped_channels_complex_icc)
#error this file contains implementation details for qed::isce2::unwrapped::channels::complex
#else


// the complex tile generator
template <typename sourceT>
auto
qed::isce2::unwrapped::channels::complex(
    // the source
    const sourceT & source,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the strides
    typename sourceT::index_type stride,
    // the range of values to render
    double mean, double brightness, double exponent, double phaseMin, double phaseMax) -> bmp_t
{
    // type aliases for the source
    using source_t = sourceT;
    // and its parts
    using index_t = typename source_t::index_type;
    using shape_t = typename source_t::shape_type;

    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the normalizer for the amplitude
    using val_t = power_t<zoom_t>;
    // the phase selector
    using selector_t = parametric_t<zoom_t>;
    using scale_t = affine_t<selector_t>;
    // the color map
    using colormap_t = hl_t<scale_t, val_t>;

    // compute the zoomed origins
    index_t zoomedAmplitude { stride[0] * origin[0], 0, stride[2] * origin[2] };
    index_t zoomedPhase { stride[0] * origin[0], 1, stride[2] * origin[2] };
    // and the zoomed tiles
    shape_t zoomedTile { stride[0] * tile[0], 1, stride[2] * tile[2] };

    // make a bitmap
    bmp_t bmp(tile[0], tile[2]);

    // zoom
    auto amplitudeDecimator = zoom_t(source, zoomedAmplitude, zoomedTile, stride);
    auto phaseDecimator = zoom_t(source, zoomedPhase, zoomedTile, stride);

    // wire up the amplitude
    auto b = val_t(amplitudeDecimator, mean, brightness, exponent);
    // wire up the phase
    auto c = selector_t(phaseDecimator, { phaseMin, phaseMax });
    auto h = scale_t(c, { 0, 2 * M_PI });

    // generate color
    auto colormap = colormap_t(h, b);
    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


#endif

// end of file
