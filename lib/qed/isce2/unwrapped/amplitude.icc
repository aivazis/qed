// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#if !defined(qed_isce2_unwrapped_channels_amplitude_icc)
#error this file contains implementation details for qed::isce2::unwrapped::channels::amplitude
#else


// the amplitude tile generator
template <typename sourceT>
auto
qed::isce2::unwrapped::channels::amplitude(
    // the source
    const sourceT & source,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the range of values to render
    double mean, double brightness, double exponent) -> bmp_t
{
    // type aliases for the source
    using source_t = sourceT;
    // and its parts
    using index_t = typename source_t::index_type;
    using shape_t = typename source_t::shape_type;

    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the normalizer
    using val_t = power_t<zoom_t>;
    // the color map
    using colormap_t = gray_t<val_t>;

    // turn the zoom level into a scale
    auto scale = 1 << zoom;
    // compute the zoomed origin
    index_t zoomedOrigin { scale * origin[0], origin[1], scale * origin[2] };
    // and the zoomed tile
    shape_t zoomedTile { scale * tile[0], tile[1], scale * tile[2] };
    // set up the decimation stride
    index_t stride { scale, 1, scale };

    // make a bitmap
    bmp_t bmp(tile[0], tile[2]);

    // zoom
    auto decimator = zoom_t(source, zoomedOrigin, zoomedTile, stride);
    // power law
    auto value = val_t(decimator, mean, brightness, exponent);
    // generate color
    auto colormap = colormap_t(value);
    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


#endif

// end of file
