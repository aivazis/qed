// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#pragma once


// collect statistics on a tile
template <typename sourceT>
auto
qed::isce2::unwrapped::stats(
    // the source
    const sourceT & source,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type shape) -> native::stats_t
{
    // my counters
    int samples = 0;
    double sum = 0.0;

    // get a seed
    double seed = std::numeric_limits<double>::quiet_NaN();
    // by looking through the data
    for (double value : source.box(origin, shape)) {
        // for the first non-nan
        if (!std::isnan(value)) {
            // when we find one, store it
            seed = value;
            // and bail
            break;
        }
    }

    // my stats
    double min = seed, mean = seed, max = seed;

    // go through the data
    for (double z : source.box(origin, shape)) {
        // if this is a nan
        if (std::isnan(z)) {
            // don't let it pollute our sample
            continue;
        }
        // update the stats
        min = std::min(min, z);
        max = std::max(max, z);
        // update the counters
        sum += z;
        ++samples;
    }

    // all done
    return { min, sum / samples, max };
}


// end of file
