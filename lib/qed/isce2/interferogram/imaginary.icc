// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#if !defined(qed_isce2_interferogram_channels_imaginary_icc)
#error this file contains implementation details for qed::isce2::interferogram::channels::imaginary
#else


// the imaginary part tile generator
template <typename sourceT>
auto
qed::isce2::interferogram::channels::imaginary(
    // the source
    const sourceT & source,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the stride
    typename sourceT::index_type stride,
    // the range of values to render
    double min, double max) -> bmp_t
{
    // type aliases for the source
    using source_t = sourceT;
    // and its parts
    using index_t = typename source_t::index_type;
    using shape_t = typename source_t::shape_type;

    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the imaginary selector
    using selector_t = imaginary_t<zoom_t>;
    // the normalizer
    using norm_t = parametric_t<selector_t>;
    // the color map
    using colormap_t = gray_t<norm_t>;

    // compute the zoomed origin
    auto zoomedOrigin = origin;
    // by setting each of its entries
    for (int axis = 0; axis < index_t::rank(); ++axis) {
        // to the product of the stride with the specified origin
        zoomedOrigin[axis] *= stride[axis];
    }
    // similarly, for the zoomed tile
    auto zoomedTile = tile;
    // set each of its entries
    for (int axis = 0; axis < index_t::rank(); ++axis) {
        // to the product of the stride with the specified tile
        zoomedTile[axis] *= stride[axis];
    }

    // make a bitmap
    bmp_t bmp(tile[0], tile[1]);

    // zoom
    auto decimator = zoom_t(source, zoomedOrigin, zoomedTile, stride);
    // extract the imaginary part
    auto selection = selector_t(decimator);
    // map to the unit interval
    auto norm = norm_t(selection, typename norm_t::interval_type(min, max));
    // generate color
    auto colormap = colormap_t(norm);
    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


#endif

// end of file
