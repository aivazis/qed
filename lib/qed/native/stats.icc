// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#pragma once


// collect statistics on a grid tile
template <typename sourceT>
auto
qed::native::stats(
    // the source
    const sourceT & source,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile) -> stats_t
{
    // get the sample
    auto box = source.box(origin, tile);
    // compute the statistics and pass them on
    return collectStatistics(box);
}


// collect statistics on a dataset
template <typename sourceT>
auto
qed::native::collectStatistics(
    // the source
    const sourceT & source) -> stats_t
{
    // my counters
    int samples = 0;
    double sum = 0.0;

    // get a seed
    double seed = std::numeric_limits<double>::quiet_NaN();
    // by looking through the data
    for (auto value : source) {
        // compute the magnitude
        double r = std::abs(value);
        // the first non-nan
        if (!std::isnan(r)) {
            // is good enough; remember it
            seed = r;
            // and bail
            break;
        }
    }

    // my stats
    double min = seed, mean = seed, max = seed;

    // go through the data
    for (auto z : source) {
        // compute the magnitude
        double r = std::abs(z);
        // if this is a nan
        if (std::isnan(r)) {
            // don't let it pollute our sample
            continue;
        }
        // update the stats
        min = std::min(min, r);
        max = std::max(max, r);
        // update the counters
        sum += r;
        ++samples;
    }

    // make a channel
    auto channel = pyre::journal::info_t("qed.isce2.unwrapped");
    channel
        // show me
        << "min: " << min << ", mean: " << (sum / samples) << ", max: "
        << max
        // flush
        << pyre::journal::endl(__HERE__);

    // all done
    return { min, sum / samples, max };
}


// end of file
