// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#pragma once

// collect statistics on a grid tile
template <typename sourceT>
auto
qed::native::profile(
    // the dataset
    const sourceT & source,
    // the points
    const points_t & path,
    // the closed path indicator
    bool closed) -> values_t<typename sourceT::value_type>
{
    // type aliases
    using index_t = typename sourceT::index_type;
    using shape_t = typename sourceT::shape_type;
    using value_t = typename sourceT::value_type;

    // make a container for the answer
    values_t<typename sourceT::value_type> values;

    // if there are no points in the path
    if (path.size() == 0) {
        // nothing much to do
        return values;
    }

    // if there are at least two points in the path
    if (path.size() > 1) {
        // make a container of segments
        auto segments = segments_t();
        // go through the points
        for (auto it = path.cbegin(); it != path.cend() - 1; ++it) {
            // form a segment from the current point and the next one and add it to the pile
            segments.emplace_back(*it, *(it + 1));
        }
        // if the path is closed
        if (closed) {
            // add a segment from the last point back to the first
            segments.emplace_back(path.back(), path.front());
        }
        // now, go through the segments
        for (auto & segment : segments) {
            // unpack
            auto & [ptail, phead] = segment;
            // convert the points into (line, sample) indices
            auto tail = index_t(std::get<0>(ptail), std::get<1>(ptail));
            auto head = index_t(std::get<0>(phead), std::get<1>(phead));
            // compute the shape of the segment bounding box
            auto shape = shape_t(std::abs(tail[0] - head[0] + 1), std::abs(tail[1] - head[1] + 1));
            // compute the pixel separation; make sure it's a double so we don't do integer
            // arithmetic until it's time
            double sep = std::max(shape[0], shape[1]);
            // the pixel separation determines the number of data samples
            for (int pxl = 0; pxl < sep; ++pxl) {
                // interpolate
                int dx = std::round(pxl / sep * (head[0] - tail[0]));
                int dy = std::round(pxl / sep * (head[1] - tail[1]));
                // to compute the index shift to this pixel
                auto shift = index_t(dx, dy);
                // assemble the index
                auto idx = index_t(tail + shift);
                // get the value
                auto value = source[idx];
                // and record an entry in the result
                values.emplace_back(idx[0], idx[1], value);
            }
        }
    }

    // get the last point on the path
    auto & last = closed ? path.front() : path.back();
    // convert it into an index
    auto idx = index_t(std::get<0>(last), std::get<1>(last));
    // sample the data
    auto data = source[idx];
    // and build the last entry
    values.emplace_back(idx[0], idx[1], data);

    // all done
    return values;
}

// end of file
