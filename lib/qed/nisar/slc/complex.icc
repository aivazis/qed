// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#if !defined(qed_nisar_slc_complex_icc)
#error this file contains implementation details for qed::nisar::slc::complex
#else


// the complex tile generator
template <typename sourceT>
auto
qed::nisar::slc::complex(
    // the source
    const dataset_t & dataset,
    // the layout
    const datatype_t & datatype,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the stride
    typename sourceT::index_type stride,
    // the range of values to render
    double min, double max, double phaseMin, double phaseMax, double saturation) -> bmp_t
{
    // type aliases
    using index_t = typename sourceT::index_type;
    using shape_t = typename sourceT::shape_type;

    // the origin of the data region is scaled by this
    auto from = origin;
    // by going through its entries
    for (int axis = 0; axis < index_t::rank(); ++axis) {
        // and multiplying them by the stride
        from[axis] *= stride[axis];
    }

    // read the data
    auto source = pyre::h5::read<sourceT>(dataset, datatype, from, tile, stride);
    // render and return
    return native::channels::complex(
        source, { 0, 0 }, tile, { 1, 1 }, min, max, phaseMin, phaseMax, saturation);
}


#endif

// end of file
