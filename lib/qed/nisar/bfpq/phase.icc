// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2025 all rights reserved

// code guard
#pragma once


// the phase tile generator
template <typename sourceT>
auto
qed::nisar::bfpq::phase(
    // the source
    const dataset_t & dataset,
    // the layout
    const datatype_t & datatype,
    // the BFPQ lookup table
    bfpq_lut_t bfpq,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the stride
    typename sourceT::index_type stride,
    // the hue range
    double low, double high,
    // the range of values to render
    double saturation, double brightness) -> bmp_t
{
    // type aliases
    using value_t = typename sourceT::value_type;
    using index_t = typename sourceT::index_type;
    using shape_t = typename sourceT::shape_type;
    using layout_t = typename sourceT::packing_type;

    // the origin of the data region is scaled by this
    auto from = origin;
    // by going through its entries
    for (int axis = 0; axis < index_t::rank(); ++axis) {
        // and multiplying them by the stride
        from[axis] *= stride[axis];
    }

    // read the BFPQ encoded data into a grid
    auto encoded = pyre::h5::read<bfpq_slc_t>(dataset, datatype, from, tile, stride);
    // describe the decoded tile
    auto packing = layout_t { tile };
    // build storage for the decoded tile
    auto decoded = sourceT(packing, packing.cells());
    // the decoder
    auto decoder = [&](bfpq_slc_cell_t encoded) -> value_t {
        // unpack and decode
        auto r = bfpq.at(encoded.real());
        auto i = bfpq.at(encoded.imag());
        // pack and ship
        return value_t { r, i };
    };
    // decode the tile
    std::transform(encoded.cbegin(), encoded.cend(), decoded.begin(), decoder);

    // render and return
    return native::channels::phase(
        decoded, { 0, 0 }, tile, { 1, 1 }, low, high, saturation, brightness);
}


// end of file
