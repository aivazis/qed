// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2024 all rights reserved

// code guard
#if !defined(qed_nisar_real_unwrapped_icc)
#error this file contains implementation details for qed::nisar::real::unwrapped
#else


// the unwrapped phase tile generator
template <typename sourceT>
auto
qed::nisar::real::unwrapped(
    // the source
    const dataset_t & dataset,
    // the layout
    const datatype_t & datatype,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the stride
    typename sourceT::index_type stride,
    // the hue interval
    double min, double max,
    // the range of values to render
    double brightness) -> bmp_t
{
    // type aliases for the source
    using source_t = sourceT;
    // and its parts
    using index_t = typename source_t::index_type;
    using shape_t = typename source_t::shape_type;
    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the phase selector
    using selector_t = parametric_t<zoom_t>;
    using scale_t = affine_t<selector_t>;
    // the color map
    using colormap_t = hl_t<scale_t, constant_t>;

    // compute the zoomed origin
    auto zoomedOrigin = origin;
    // by setting each of its entries
    for (int axis = 0; axis < index_t::rank(); ++axis) {
        // to the product of the stride with the specified origin
        zoomedOrigin[axis] *= stride[axis];
    }
    // read the data
    auto source = pyre::h5::read<sourceT>(dataset, datatype, zoomedOrigin, tile, stride);

    // make a bitmap
    bmp_t bmp(tile[0], tile[1]);

    // zoom
    auto decimator = zoom_t(source, { 0, 0 }, tile, { 1, 1 });
    // extract the phase
    auto c = selector_t(decimator, { min, max });
    auto h = scale_t(c, { 0, 2 * M_PI });
    // set up the brightness
    auto b = constant_t(brightness);
    // generate color
    auto colormap = colormap_t(h, b);
    // encode
    bmp.encode(colormap);
    // and return the tile
    return bmp;
}


#endif

// end of file
