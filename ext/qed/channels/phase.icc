// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2022 all rights reserved

// code guard
#if !defined(qed_py_channels_phase_icc)
#error this file contains implementation details for qed::py::channels::phase
#else


// the tile generators
template <typename sourceT>
auto
qed::py::channels::phaseGridTile(
    // the source
    const sourceT & source,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the range of values to render
    double saturation, double brightness) -> bmp_t
{
    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the phase selector
    using selector_t = phase_t<zoom_t>;
    // the color map
    using colormap_t = hsb_t<selector_t, constant_t, constant_t>;

    // make a bitmap
    bmp_t bmp(tile[0], tile[1]);

    // zoom
    auto decimator = zoom_t(source, origin, tile, 1 << zoom);

    // extract the phase
    auto h = selector_t(decimator);
    // set up the saturation
    auto s = constant_t(saturation);
    // and brightness
    auto b = constant_t(brightness);

    // generate color
    auto colormap = colormap_t(h, s, b);

    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


template <typename sourceT>
auto
qed::py::channels::phaseHDF5Tile(
    // the source
    const dataset_t & dataset,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the range of values to render
    double saturation, double brightness) -> bmp_t
{
    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the phase selector
    using selector_t = phase_t<zoom_t>;
    // the color map
    using colormap_t = hsb_t<selector_t, constant_t, constant_t>;

    // compute the scale
    auto scale = 1 << zoom;
    // the shape of the data region is scaled by this
    auto region = typename sourceT::shape_type(scale * tile);
    // and so is the origin
    auto from = typename sourceT::index_type(scale * origin);

    // allocate my source
    auto source = sourceT(typename sourceT::packing_type(region), region.cells());

    // copy the HDF5 data
    // we read from
    hsize_t readFrom[2] = { static_cast<hsize_t>(from[0]), static_cast<hsize_t>(from[1]) };
    // the amount of data we transfer
    hsize_t count[2] = { static_cast<hsize_t>(region[0]), static_cast<hsize_t>(region[1]) };

    // get the dataspace of the dataset
    auto readSpace = dataset.getSpace();
    // select the hyperslab that corresponds to the tile we want to extract
    readSpace.selectHyperslab(H5S_SELECT_SET, count, readFrom);

    // make a dataspace for the destination
    auto writeSpace = dataspace_t(2, count);

    // transfer
    dataset.read(source.data()->data(), dataset.getCompType(), writeSpace, readSpace);

    // make a bitmap
    bmp_t bmp(tile[0], tile[1]);

    // zoom; we only transfer one zoomed tile's worth of data, so the decimator
    // should always start at {0,0}
    auto decimator = zoom_t(source, { 0, 0 }, tile, scale);

    // extract the phase
    auto h = selector_t(decimator);
    // set up the saturation
    auto s = constant_t(saturation);
    // and brightness
    auto b = constant_t(brightness);

    // generate color
    auto colormap = colormap_t(h, s, b);

    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


#endif

// end of file
