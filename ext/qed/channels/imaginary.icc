// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2022 all rights reserved

// code guard
#if !defined(qed_py_channels_imaginary_icc)
#error this file contains implementation details for qed::py::channels::imaginary
#else


// the tile generator
template <typename sourceT>
auto
qed::py::channels::imaginaryTile(
    // the source
    const sourceT & source,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type shape,
    // the range of values to render
    double min, double max) -> bmp_t
{
    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the imaginary selector
    using selector_t = imaginary_t<zoom_t>;
    // the normalizer
    using norm_t = parametric_t<selector_t>;
    // the color map
    using colormap_t = gray_t<norm_t>;

    // make a bitmap
    bmp_t bmp(shape[0], shape[1]);

    // zoom
    auto decimator = zoom_t(source, origin, shape, 1 << zoom);
    // extract the imaginary
    auto selection = selector_t(decimator);
    // map to the unit interval
    auto norm = norm_t(selection, typename norm_t::interval_type(min, max));
    // generate color
    auto colormap = colormap_t(norm);
    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


#endif

// end of file
