// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2022 all rights reserved

// code guard
#if !defined(qed_py_channels_amplitude_icc)
#error this file contains implementation details for qed::py::channels::amplitude
#else


// the tile generators
template <typename sourceT>
auto
qed::py::channels::amplitudeGridTile(
    // the source
    const sourceT & source,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the range of values to render
    double min, double max) -> bmp_t
{
    // type aliases for the workflow nodes
    // my decimator
    using zoom_t = decimate_t<sourceT>;
    // the amplitude selector
    using selector_t = amplitude_t<zoom_t>;
    // the normalizer
    using norm_t = parametric_t<selector_t>;
    // the color map
    using colormap_t = gray_t<norm_t>;

    // make a bitmap
    bmp_t bmp(tile[0], tile[1]);

    // zoom
    auto decimator = zoom_t(source, origin, tile, 1 << zoom);
    // extract the amplitude
    auto selection = selector_t(decimator);
    // map to the unit interval
    auto norm = norm_t(selection, typename norm_t::interval_type(min, max));
    // generate color
    auto colormap = colormap_t(norm);
    // and encode
    bmp.encode(colormap);

    // all done
    return bmp;
}


template <typename sourceT>
auto
qed::py::channels::amplitudeHDF5Tile(
    // the source
    const dataset_t & dataset,
    // the layout
    const datatype_t & datatype,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile,
    // the range of values to render
    double min, double max) -> bmp_t
{
    // type aliases
    using index_t = typename sourceT::index_type;
    using shape_t = typename sourceT::shape_type;

    // compute the scale
    auto scale = 1 << zoom;
    // the origin of the data region is scaled by this
    auto from = index_t(scale * origin);
    // form the strides
    shape_t strides = shape_t::fill(scale);

    // read the data
    auto source = pyre::h5::read<sourceT>(dataset, datatype, from, tile, strides);

    // and render
    return amplitudeGridTile(source, 0, { 0, 0 }, tile, min, max);
}


#endif

// end of file
