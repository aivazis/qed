// -*- c++ -*-
//
// michael a.g. aïvázis <michael.aivazis@para-sim.com>
// (c) 1998-2022 all rights reserved

// code guard
#if !defined(qed_py_datasets_stats_icc)
#error this file contains implementation details for qed::py::datasets::stats
#else


// collect statistics on a grid tile
template <typename sourceT>
auto
qed::py::datasets::statsGrid(
    // the source
    const sourceT & source,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile) -> stats_t
{
    // my stats
    int samples = 0;
    double sum = 0.0;
    double min = 0, mean = 0, max = 0;

    // get the sample
    auto box = source.box(origin, tile);

    // go through the data
    for (auto z : box) {
        // compute the magnitude
        double r = std::abs(z);
        // update the stats
        min = std::min(min, r);
        max = std::max(max, r);
        // update the
        sum += r;
        ++samples;
    }

    // all done
    return { min, sum / samples, max };
}


template <typename sourceT>
auto
qed::py::datasets::statsHDF5(
    // the source
    const dataset_t & dataset,
    // the layout
    const datatype_t & datatype,
    // the zoom level
    int zoom,
    // the origin of the tile
    typename sourceT::index_type origin,
    // the tile shape
    typename sourceT::shape_type tile) -> stats_t
{
    // compute the scale
    auto scale = 1 << zoom;
    // the shape of the data region is scaled by this
    auto region = typename sourceT::shape_type(scale * tile);
    // and so is the origin
    auto from = typename sourceT::index_type(scale * origin);
    // we operate at zoom level 0
    typename sourceT::shape_type strides = sourceT::shape_type::one();

    // read the data
    auto source = pyre::h5::read<sourceT>(dataset, datatype, from, region, strides);

    // my stats
    int samples = 0;
    double sum = 0.0;
    double min = 0, mean = 0, max = 0;

    // go through the data
    for (auto z : source) {
        // compute the magnitude
        double r = std::abs(z);
        // update the stats
        min = std::min(min, r);
        max = std::max(max, r);
        // update the count
        sum += r;
        ++samples;
    }

    // all done
    return { min, sum / samples, max };
}


#endif

// end of file
